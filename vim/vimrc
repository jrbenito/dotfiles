set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Everyone is talking about this
Bundle 'altercation/vim-colors-solarized'
"set rtp+=~/.vim/bundle/vim-colors-solarized

" ejs code highlight
Bundle 'briancollins/vim-jst'
Plugin 'pangloss/vim-javascript'

" Arduino
Bundle "sudar/vim-arduino-syntax"

" Add Arduino snippets
Bundle 'sudar/vim-arduino-snippets'
" Autocomplete
autocmd FileType arduino set omnifunc=ccomplete#Complete

" Autocompletition
Plugin 'Valloric/YouCompleteMe'
" ycm is compiled with python 2 but Ubuntu I use has python 3 default
"let ycm_server_python_interpreter = '/usr/bin/python2'
let g:ycm_python_binary_path = 'python' " pick python for virtualenv
" Disable autocomplete for markdown files
let g:ycm_filetype_blacklist = {
 \ 'markdown' : 1
 \}


let g:ycm_seed_identifiers_with_syntax=1 "load language keywords in identifier list
nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>

" Updated Vim-Git runtime files
Bundle 'tpope/vim-git'

" Git wrapper for vim. Who needs git bash any more ;)
Bundle 'tpope/vim-fugitive'

" Highlight changes.
" Jump between changes using ]c and [c
" Stage the hunk with <Leader>hs
" Revert it with <Leader>hr
if has('signs')
   Bundle 'airblade/vim-gitgutter'

   " Options for gitgutter. More available at https://github.com/airblade/vim-gitgutter
   let g:gitgutter_escape_grep = 1   " Use raw grep
   let g:gitgutter_eager = 0         " Don't run eagerly
endif

" Interacao com tmux
Plugin 'benmills/vimux'

" Gundo for undo traverse
Plugin 'sjl/gundo.vim'
nnoremap <F5> :GundoToggle<CR>
let g:gundo_prefer_python3 = 1

" JEDI-Vim
Bundle 'davidhalter/jedi-vim'
"let g:jedi#force_py_version = 3 " let it pick the virtenv one (I hope)

" NerdTree
Bundle 'scrooloose/nerdtree'
map <F3> :NERDTreeToggle<CR>

if v:version > 702
    " Syntax Highlighter
    Bundle 'scrooloose/syntastic.git'
    let g:syntastic_python_python_exec = 'python3'
    let g:syntastic_check_on_open=1 " Enable syntax check when a file is opened or saved
    let g:syntastic_auto_loc_list=1
    nmap <F6> :SyntasticToggleMode<CR> " Toggle Syntax highlight
endif

" Automatically close tags, quotes etc
Bundle 'Raimondi/delimitMate'
let delimitMate_expand_cr=1

" Snippet manager. When you get all Snippets, who needs Textmate anymore ;)
Bundle 'SirVer/ultisnips'
" YouCompleteMe and ultisnips compatibility
" Got the code from https://github.com/Valloric/YouCompleteMe/issues/420

function! g:UltiSnips_Complete()
    call UltiSnips#ExpandSnippet()
    if g:ulti_expand_res == 0
        if pumvisible()
            return "\<C-n>"
        else
            call
            UltiSnips#JumpForwards()
            if g:ulti_jump_forwards_res == 0
                return "\<TAB>"
            endif
        endif
    endif
    return ""
endfunction
   
func! s:jInYCM()
    if pumvisible()
        return "\<C-n>"
    else
        return "\<c-j>"
    endif
endfunction
                                                                
func! s:kInYCM()
    if pumvisible()
        return "\<C-p>"
    else
        return "\<c-k>"
    endif
endfunction

inoremap <c-j> <c-r>=g:jInYCM()<cr>
au BufEnter,BufRead * exec "inoremap <silent> " . g:UltiSnipsJumpBackwordTrigger . " <C-R>=g:kInYCM()<cr>"
au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"

let g:UltiSnipsExpandTrigger = "<nop>"
let g:ulti_expand_or_jump_res = 0
function ExpandSnippetOrCarriageReturn()
    let snippet = UltiSnips#ExpandSnippetOrJump()
    if g:ulti_expand_or_jump_res > 0
        return snippet
    else
        return "\<CR>"
    endif
endfunction
"inoremap <expr> <CR> pumvisible() ? "<C-R>=ExpandSnippetOrCarriageReturn()<CR>" : "\<CR>"
inoremap <expr> <CR> pumvisible() ? "\<C-R>=ExpandSnippetOrCarriageReturn()\<CR>" : "\<CR>"

let g:UltiSnipsJumpBackwordTrigger = "<c-k>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsListSnippets="<c-e>"

" Snippets for different languages
Bundle 'honza/vim-snippets'

" Snippet global options
let g:snips_author='Josenivaldo Benito'
let g:UltiSnipsEditSplit="vertical"  " :UltiSnipsEdit will split the  window.


" for GDB
"Bundle 'vim-scripts/Conque-GDB'


" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required

"kernel does not like spaces
set expandtab     " Expand tab to spaces
set tabstop=4     " Width of a tab is 4
set shiftwidth=4  " number of spaces to use for auto indenting
set softtabstop=4 " When backspace is used to delete spaces, delete 4 at a time. This is equal to tabstop and shfitwidth

set nowrap        " don't wrap lines
set scrolloff=5   " Show at least 5 lines around the cursor

set backspace=indent,eol,start " allow backspacing over everything in insert mode
set autoindent    " always set auto indenting on
set copyindent    " copy the previous indentation on autoindenting
set smartindent   " Set intent smartly

set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'
set showmatch     " set show matching parenthesis
set smarttab      " insert tabs on the start of a line according to shiftwidth, not tabstop
set wildmenu      " Enhance auto completion

set number        " always show line numbers
set ruler         " Show the current line number in the status bar

" Set to auto read when a file is changed from the outside
set autoread

" History related settings
set history=1000         " remember more commands and search history
set undolevels=1000      " use many levels of undo

" Visual settings
set title                " change the terminal's title
set visualbell           " don't beep
set noerrorbells         " don't beep

" ---------------------------------------------------------------------------
" Filesystem handling settings
"
"  ---------------------------------------------------------------------------
set nobackup
set noswapfile
set wildignore=*.swp,*.bak,*.pyc,*.class,*.o,*.hex,*.elf "Ignore thes files while doing file completion
set wildmode=longest,list " Start file completion with the longest match

" ----------------------------------------------------------------------------
" Key mappings
"
"  ----------------------------------------------------------------------------

" Paste without messing up formatting.
set pastetoggle=<F2>

" change the mapleader from \ to ,
let mapleader=","

" Map ' to : so that you can save pressing shift
"nnoremap ' :

" forgot sudo while opening the file
cmap w!! w !sudo tee % >/dev/null

" Quickly edit/reload the vimrc file
nmap <silent> <leader>ev :tabnew ~/dotfiles/vim/vimrc<CR>
nmap <silent> <leader>sv :source $MYVIMRC<CR>
" Use <leader>l to toggle display of whitespace
nmap <leader>l :set list!<CR>

" ----------------------------------------------------------------------------
" Command Mode settings
"
" ----------------------------------------------------------------------------
" Bash like keys for the command line
cnoremap <C-A>      <Home>
cnoremap <C-E>      <End>
cnoremap <C-K>      <C-U>

cnoremap <C-P> <Up>
cnoremap <C-N> <Down>

" This shows what you are typing as a command.  I love this!
set showcmd

" ejs file highlight
au BufNewFile,BufRead *.ejs set filetype=html

syntax on
let g:solarized_termcolors=256
set background=dark
colorscheme solarized
