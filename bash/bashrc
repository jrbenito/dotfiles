# shellcheck disable=SC1117
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# Path where additional files are present.
# This line will be replaced by the setup script.
additional_files="$HOME/dotfiles"

# If not running interactively, don't do anything
[ -z "$PS1" ] && return
# If not running on TMUX set terminal to xterm-256
[ -z "$TMUX" ] && export TERM=xterm-256color


# Color code definitions
        RED="\[\033[0;31m\]"
# shellcheck disable=SC2034
     YELLOW="\[\033[0;33m\]"
      GREEN="\[\033[0;32m\]"
       BLUE="\[\033[0;34m\]"
# shellcheck disable=SC2034
  LIGHT_RED="\[\033[1;31m\]"
# shellcheck disable=SC2034
LIGHT_GREEN="\[\033[1;32m\]"
      WHITE="\[\033[1;37m\]"
# shellcheck disable=SC2034
 LIGHT_GRAY="\[\033[0;37m\]"
 COLOR_NONE="\[\e[m\]"
# shellcheck disable=SC2034
     PURPLE="\[\033[1;35m\]"

# If there is a machine specific file then load it.
if [ -f ~/.bash_specific ]; then
    # shellcheck source=/dev/null
    . ~/.bash_specific
fi

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

#-----------------------------------------------------------------------------------
# Load additional files
#-----------------------------------------------------------------------------------
# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    # shellcheck disable=SC1091
    . /etc/bash_completion
fi

# Git command completion
if [ -f "$additional_files/git/git-contrib/completion/git-completion.bash" ]; then
    # shellcheck source=/dev/null
    . "$additional_files/git/git-contrib/completion/git-completion.bash"
fi

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f "$additional_files/bash/bash_aliases" ]; then
    # shellcheck source=/dev/null
    . "$additional_files/bash/bash_aliases"
fi

# bash history settings
if [ -f "$additional_files/bash/bash_history_options" ]; then
    # shellcheck source=/dev/null
    . "$additional_files/bash/bash_history_options"
fi

# Commands to customize programs that use Readline
# http://www.gnu.org/software/bash/manual/html_node/Readline-Init-File.html
if [ -f "$additional_files/bash/inputrc" ]; then
    export INPUTRC="$additional_files/bash/inputrc"
fi

#-----------------------------------------------------------------------------------
# Prompt and color settings
#-----------------------------------------------------------------------------------

if [[ -z ${HOST_COLOR} ]]  # If host color is not set, then use BLUE
then
    HOST_COLOR="$BLUE"
fi

# I never liked SudarÂ´s prompt, but keep it here when I make a custom for me
if [[ $USER == sudar* ]]  # you might have to customize the username in your case
then
    #The lowercase w is the full current working directory and W is last part of current directory
    PS1_PRE="${HOST_COLOR}\h${WHITE}:${RED}\w${COLOR_NONE}"
else
    PS1_PRE="${GREEN}\u${WHITE}@${HOST_COLOR}\h${WHITE}:${RED}\w${COLOR_NONE}"
fi

### Solarized-dark colors for GNU-based ls
### as per http://geoff.greer.fm/lscolors/
export LS_COLORS="di=36;40:ln=35;40:so=31;:pi=0;:ex=1;;40:bd=0;:cd=37;:su=37;:sg=0;:tw=0;:ow=0;:"

if [ -f "$additional_files/git/git-contrib/completion/git-prompt.sh" ]; then

    # Configure options for git prompt. Check full options at
    # https://github.com/git/git/blob/master/contrib/completion/git-prompt.sh
    export GIT_PS1_SHOWDIRTYSTATE=Y
    export GIT_PS1_SHOWSTASHSTATE=Y
    export GIT_PS1_SHOWUNTRACKEDFILES=Y
    export GIT_PS1_SHOWUPSTREAM="auto"
    export GIT_PS1_SHOWCOLORHINTS=Y

    # shellcheck source=/dev/null
    . "$additional_files/git/git-contrib/completion/git-prompt.sh"

    GIT_PROMPT="Y"

fi

PS1_POST="\\\$ "

if [ "$GIT_PROMPT" == "Y" ]; then
    # Configure prompt
    PROMPT_COMMAND='__git_ps1 "$PS1_PRE" "$PS1_POST"'
else
    PS1="${PS1_PRE}${PS1_POST} "
fi

# If this is an xterm set the title to user@host:dir
#case "$TERM" in
#xterm*|rxvt*)
#    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
#    ;;
#*)
#    ;;
#esac

# export path for user/bin directory
if { ! echo "$PATH" |grep "$HOME/bin" 2> /dev/null > /dev/null; }; then
   export PATH=$PATH:$HOME/bin
fi

# Usando o virtual env sem wrappers agora
# where to store our virtual envs
#export WORKON_HOME=$HOME/virtenvs
# where projects will reside
#export PROJECT_HOME=$HOME/Projects-Active
# where is the virtualenvwrapper.sh
# shellcheck source=/dev/null
#source "$HOME/.local/bin/virtualenvwrapper.sh"

# Options make less more interesting
export LESS='-C -M -I -j 10 -#4 -R'

export NVM_DIR="$HOME/.nvm"
# shellcheck source=/dev/null
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm

# added by travis gem
# shellcheck source=/dev/null
[ -f /home/jbenito/.travis/travis.sh ] && source /home/jbenito/.travis/travis.sh
